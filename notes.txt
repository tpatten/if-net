nvidia-docker run -it -v /tmp/.X11-unix:/tmp/.X11-unix -v /home/tpatten:/home/tpatten -v /home/tpatten/v4rtemp:/home/tpatten/v4rtemp -e DISPLAY=$DISPLAY --env QT_X11_NO_MITSHM=1 --network=host -v /usr/lib/nvidia-450:/usr/lib/nvidia-450 -v /usr/lib32/nvidia-450:/usr/lib32/nvidia-450 --privileged ifnets:latest bash

export PATH="/usr/lib/nvidia-450/bin":${PATH}
export LD_LIBRARY_PATH="/usr/lib/nvidia-450:/usr/lib32/nvidia-450":${LD_LIBRARY_PATH}

export PYTHONPATH=/home/tpatten/Code/if-net/data_processing/:$PYTHONPATH

ls shapenet/*.tar.gz |xargs -n1 -i tar -xf {} -C shapenet/data/

# Parallel
python3.7 data_processing/convert_to_scaled_off.py

python3.7 data_processing/voxelized_pointcloud_sampling.py -res 128 -num_points 300

# Training input
python3.7 data_processing/boundary_sampling.py -sigma 0.1
python3.7 data_processing/boundary_sampling.py -sigma 0.01

# Remove bad meshes
python3.7 data_processing/filter_corrupted.py -file 'voxelization_32.npy' -delete

# For visualization
python3.7 data_processing/create_pc_off.py -res 128 -num_points 300

# Training
python3.7 train.py -std_dev 0.1 0.01 -res 128 -m ShapeNetPoints -batch_size 6 -pointcloud -pc_samples 3000

# Generation
python3.7 generate.py -std_dev 0.1 0.01 -res 128 -m ShapeNetPoints -checkpoint 12 -batch_points 400000 -std_dev 0.1 0.01 -pointcloud -pc_samples 3000

# Demo
python3.7 demo.py -std_dev 0.1 0.01 -res 128 -m ShapeNetPoints -checkpoint 12 -batch_points 200000 -std_dev 0.1 0.01 -pointcloud -pc_samples 300 -datapath 02828884/1a40eaf5919b1b3f3eaa2b95b99dae6
